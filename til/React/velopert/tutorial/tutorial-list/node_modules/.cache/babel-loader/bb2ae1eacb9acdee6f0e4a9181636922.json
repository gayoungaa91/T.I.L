{"ast":null,"code":"var _jsxFileName = \"/Users/igayeong/Documents/PORTFOLIO/til/React/velopert/src/App.js\";\nimport React, { useRef, useMemo, useCallback, useReducer, createContext } from 'react'; // import Counter from './Counter'\n// import InputSample from './InputSample'\n\nimport UserList from './UserList2';\nimport CreateUser from './CreateUser';\nimport useInputs from './useInputs';\nimport produce from 'immer';\n\nfunction countActiveUsers(users) {\n  console.log('활성 세는중');\n  return users.filter(user => user.active).length;\n}\n\nconst initialState = {\n  users: [{\n    id: 1,\n    username: 'rkdud',\n    email: 'hap@ss',\n    active: true\n  }, {\n    id: 2,\n    username: 'rbgk',\n    email: 'pro@nn',\n    active: false\n  }, {\n    id: 3,\n    username: 'zzzz',\n    email: 'love@dd',\n    active: false\n  }]\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    // case 'CHANGE_INPUT':\n    //   return {\n    //     ...state,\n    //     inputs: {\n    //       ...state.inputs,\n    //       [action.name]: action.value\n    //     }\n    //   }\n    case 'CREATE_USER':\n      return produce(state, draft => {\n        draft.users.push(action.user);\n      });\n    // return {\n    //   inputs: initialState.inputs,\n    //   users: state.users.concat(action.user)\n    // }\n\n    case 'TOGGLE_USER':\n      return produce(state, draft => {\n        const user = draft.users.map(user => user.id === action.id);\n        user.active = !user.active;\n      });\n    // return {\n    //   ...state,\n    //   users: state.users.map(user => \n    //     user.id === action.id\n    //       ? {...user, active: !user.active}\n    //       : user\n    //   )\n    // }\n\n    case 'REMOVE_USER':\n      return produce(state, draft => {\n        const index = draft.users.findIndex(user => user.id === action.id);\n        draft.users.splice(index, 1);\n      });\n    // return produce(state, draft => {\n    //   draft.users.filter(user => user.id !== action.id)\n    // })\n    // return {\n    //   ...state,\n    //   users: state.users.filter(user => user.id !== action.id)\n    // }\n\n    default:\n      throw new Error('unhandled action');\n  }\n}\n\nexport const UserDispatch = createContext(null);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [form, onChange, reset] = useInputs({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = form;\n  const nextId = useRef(4);\n  const {\n    users\n  } = state; // const {username, email} = state.inputs;\n  // e받아와서 특정작업, 컴포넌트 만들어질때 생성되어 앞으로는 재사용할 예정\n  // const onChange = useCallback(e => {\n  //   const {name, value} = e.target;\n  //   dispatch({\n  //     type:'CHANGE_INPUT',\n  //     name,\n  //     value,\n  //   })\n  // }, [])\n\n  const onCreate = useCallback(() => {\n    dispatch({\n      type: 'CREATE_USER',\n      user: {\n        id: nextId.current,\n        username,\n        email\n      }\n    });\n    nextId.current += 1;\n    reset();\n  }, [username, email, reset]);\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(UserDispatch.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(UserList, {\n    users: users,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"\\uD65C\\uC131 \\uC0AC\\uC6A9\\uC790 \\uC218:\", count));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/igayeong/Documents/PORTFOLIO/til/React/velopert/src/App.js"],"names":["React","useRef","useMemo","useCallback","useReducer","createContext","UserList","CreateUser","useInputs","produce","countActiveUsers","users","console","log","filter","user","active","length","initialState","id","username","email","reducer","state","action","type","draft","push","map","index","findIndex","splice","Error","UserDispatch","App","dispatch","form","onChange","reset","nextId","onCreate","current","count"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,OAAxB,EAAiCC,WAAjC,EAA8CC,UAA9C,EAA0DC,aAA1D,QAA8E,OAA9E,C,CACA;AACA;;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,OAApB;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,SAAOF,KAAK,CAACG,MAAN,CAAaC,IAAI,IAAEA,IAAI,CAACC,MAAxB,EAAgCC,MAAvC;AACD;;AAED,MAAMC,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,CACL;AACEQ,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,KAAK,EAAC,QAHR;AAIEL,IAAAA,MAAM,EAAE;AAJV,GADK,EAOL;AACEG,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,KAAK,EAAC,QAHR;AAIEL,IAAAA,MAAM,EAAE;AAJV,GAPK,EAaL;AACEG,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,KAAK,EAAC,SAHR;AAIEL,IAAAA,MAAM,EAAE;AAJV,GAbK;AADY,CAArB;;AAuBA,SAASM,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAK,aAAL;AACE,aAAOhB,OAAO,CAACc,KAAD,EAAQG,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACf,KAAN,CAAYgB,IAAZ,CAAiBH,MAAM,CAACT,IAAxB;AACD,OAFa,CAAd;AAGA;AACA;AACA;AACA;;AACF,SAAK,aAAL;AACE,aAAON,OAAO,CAACc,KAAD,EAAQG,KAAK,IAAI;AAC7B,cAAMX,IAAI,GAAGW,KAAK,CAACf,KAAN,CAAYiB,GAAZ,CAAgBb,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYK,MAAM,CAACL,EAA3C,CAAb;AACAJ,QAAAA,IAAI,CAACC,MAAL,GAAc,CAACD,IAAI,CAACC,MAApB;AACD,OAHa,CAAd;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACF,SAAK,aAAL;AACE,aAAOP,OAAO,CAACc,KAAD,EAAQG,KAAK,IAAI;AAC7B,cAAMG,KAAK,GAAGH,KAAK,CAACf,KAAN,CAAYmB,SAAZ,CAAsBf,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYK,MAAM,CAACL,EAAjD,CAAd;AACAO,QAAAA,KAAK,CAACf,KAAN,CAAYoB,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACD,OAHa,CAAd;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACF;AACE,YAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AA7CJ;AA+CD;;AAED,OAAO,MAAMC,YAAY,GAAG5B,aAAa,CAAC,IAAD,CAAlC;;AAEP,SAAS6B,GAAT,GAAe;AACb,QAAM,CAACX,KAAD,EAAQY,QAAR,IAAoB/B,UAAU,CAACkB,OAAD,EAAUJ,YAAV,CAApC;AACA,QAAM,CAACkB,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,IAA0B9B,SAAS,CAAC;AACxCY,IAAAA,QAAQ,EAAE,EAD8B;AAExCC,IAAAA,KAAK,EAAE;AAFiC,GAAD,CAAzC;AAIA,QAAM;AAACD,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBe,IAA1B;AACA,QAAMG,MAAM,GAAGtC,MAAM,CAAC,CAAD,CAArB;AACA,QAAM;AAACU,IAAAA;AAAD,MAAUY,KAAhB,CARa,CASb;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMiB,QAAQ,GAAGrC,WAAW,CAAC,MAAM;AACjCgC,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,aADC;AAEPV,MAAAA,IAAI,EAAE;AACJI,QAAAA,EAAE,EAAEoB,MAAM,CAACE,OADP;AAEJrB,QAAAA,QAFI;AAGJC,QAAAA;AAHI;AAFC,KAAD,CAAR;AAQAkB,IAAAA,MAAM,CAACE,OAAP,IAAkB,CAAlB;AACAH,IAAAA,KAAK;AACN,GAX2B,EAWzB,CAAClB,QAAD,EAAWC,KAAX,EAAkBiB,KAAlB,CAXyB,CAA5B;AAaA,QAAMI,KAAK,GAAGxC,OAAO,CAAC,MAAMQ,gBAAgB,CAACC,KAAD,CAAvB,EAAgC,CAACA,KAAD,CAAhC,CAArB;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEwB,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAEf,QADZ;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,QAAQ,EAAEgB,QAHZ;AAIE,IAAA,QAAQ,EAAEG,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE7B,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,EAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAe+B,KAAf,CAZA,CADF;AAgBD;;AAED,eAAeR,GAAf","sourcesContent":["import React , {useRef, useMemo, useCallback, useReducer, createContext} from 'react';\n// import Counter from './Counter'\n// import InputSample from './InputSample'\nimport UserList from './UserList2';\nimport CreateUser from './CreateUser';\nimport useInputs from './useInputs';\nimport produce from 'immer';\n\nfunction countActiveUsers(users) {\n  console.log('활성 세는중');\n  return users.filter(user=>user.active).length;\n}\n\nconst initialState = {\n  users: [\n    {\n      id: 1,\n      username: 'rkdud',\n      email:'hap@ss',\n      active: true,\n    },\n    {\n      id: 2,\n      username: 'rbgk',\n      email:'pro@nn',\n      active: false,\n    },\n    {\n      id: 3,\n      username: 'zzzz',\n      email:'love@dd',\n      active: false,\n    }\n  ]\n}\n\nfunction reducer(state, action) {\n  switch(action.type) {\n    // case 'CHANGE_INPUT':\n    //   return {\n    //     ...state,\n    //     inputs: {\n    //       ...state.inputs,\n    //       [action.name]: action.value\n    //     }\n    //   }\n    case 'CREATE_USER':\n      return produce(state, draft => {\n        draft.users.push(action.user);\n      })\n      // return {\n      //   inputs: initialState.inputs,\n      //   users: state.users.concat(action.user)\n      // }\n    case 'TOGGLE_USER':\n      return produce(state, draft => {\n        const user = draft.users.map(user => user.id === action.id);\n        user.active = !user.active\n      })\n      // return {\n      //   ...state,\n      //   users: state.users.map(user => \n      //     user.id === action.id\n      //       ? {...user, active: !user.active}\n      //       : user\n      //   )\n      // }\n    case 'REMOVE_USER':\n      return produce(state, draft => {\n        const index = draft.users.findIndex(user => user.id === action.id)\n        draft.users.splice(index, 1)\n      })\n\n      // return produce(state, draft => {\n      //   draft.users.filter(user => user.id !== action.id)\n      // })\n\n      // return {\n      //   ...state,\n      //   users: state.users.filter(user => user.id !== action.id)\n      // }\n    default:\n      throw new Error('unhandled action');\n  }\n}\n\nexport const UserDispatch = createContext(null);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [form, onChange, reset] = useInputs({\n    username: '',\n    email: '',\n  });\n  const {username, email} = form;\n  const nextId = useRef(4);\n  const {users} = state;\n  // const {username, email} = state.inputs;\n\n  // e받아와서 특정작업, 컴포넌트 만들어질때 생성되어 앞으로는 재사용할 예정\n  // const onChange = useCallback(e => {\n\n  //   const {name, value} = e.target;\n\n  //   dispatch({\n  //     type:'CHANGE_INPUT',\n  //     name,\n  //     value,\n  //   })\n  // }, [])\n\n  const onCreate = useCallback(() => {\n    dispatch({\n      type: 'CREATE_USER',\n      user: {\n        id: nextId.current,\n        username,\n        email,\n      }\n    })  \n    nextId.current += 1\n    reset();\n  }, [username, email, reset])\n  \n  const count = useMemo(() => countActiveUsers(users), [users] )\n\n  return (\n    <div>\n      <UserDispatch.Provider value={dispatch}>\n        <CreateUser \n          username={username} \n          email={email} \n          onChange={onChange} \n          onCreate={onCreate}\n        />\n        <UserList   \n          users={users} \n        />\n      </UserDispatch.Provider>\n    <div>활성 사용자 수:{count}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}