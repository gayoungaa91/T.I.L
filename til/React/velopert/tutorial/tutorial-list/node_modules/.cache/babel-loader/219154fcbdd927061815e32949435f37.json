{"ast":null,"code":"var _jsxFileName = \"/Users/igayeong/Documents/PORTFOLIO/til/React/velopert/src/App.js\";\nimport React, { useRef, useState, useMemo, useCallback } from 'react'; // import Counter from './Counter'\n// import InputSample from './InputSample'\n\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction countActiveUsers(users) {\n  console.log('활성 세는중');\n  return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = inputs;\n  const [users, setUsers] = useState([{\n    id: 1,\n    username: 'rkdud',\n    email: 'hap@ss',\n    active: true\n  }, {\n    id: 2,\n    username: 'rbgk',\n    email: 'pro@nn',\n    active: false\n  }, {\n    id: 3,\n    username: 'zzzz',\n    email: 'love@dd',\n    active: false\n  }]);\n  const nextId = useRef(4);\n  const onChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      [name]: value\n    });\n  }, [inputs]); // inputs가 바뀔때만 사용하게되고, 아니라면 그냥 재사용하게 된다.\n  // 참조하는것들을 넣어준다.\n  // deps에는 지금 영향을 받는 참조값을 넣어주지 않으면, 최신상태의 참조값이 아니라 이전값이 영향을 받을 수 있다.\n\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    }; // setUsers([...users, user]);\n\n    setUsers(users => users.concat(user));\n    setInputs({\n      username: '',\n      email: ''\n    });\n    nextId.current += 1;\n  }, [username, email, users]);\n  const onRemove = useCallback(id => {\n    setUsers(users => users.filter(user => user.id !== id));\n  }, []); // 배열에 있는 특정아이템만 업데이트 해줄때에도 map을 사용할 수 있다.\n\n  const onToggle = useCallback(id => {\n    setUsers(users.map(user => user.id === id ? { ...user,\n      active: !user.active\n    } : user));\n  }, [users]);\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(UserList, {\n    users: users,\n    onRemove: onRemove,\n    onToggle: onToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"\\uD65C\\uC131 \\uC0AC\\uC6A9\\uC790 \\uC218: \", count));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/igayeong/Documents/PORTFOLIO/til/React/velopert/src/App.js"],"names":["React","useRef","useState","useMemo","useCallback","UserList","CreateUser","countActiveUsers","users","console","log","filter","user","active","length","App","inputs","setInputs","username","email","setUsers","id","nextId","onChange","e","name","value","target","onCreate","current","concat","onRemove","onToggle","map","count"],"mappings":"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","sourcesContent":["import React , {useRef, useState, useMemo, useCallback} from 'react';\n// import Counter from './Counter'\n// import InputSample from './InputSample'\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction countActiveUsers(users) {\n  console.log('활성 세는중');\n  return users.filter(user=>user.active).length;\n}\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username:'',\n    email:''\n  })\n  const {username, email} = inputs;\n\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      username: 'rkdud',\n      email:'hap@ss',\n      active: true,\n    },\n    {\n      id: 2,\n      username: 'rbgk',\n      email:'pro@nn',\n      active: false,\n    },\n    {\n      id: 3,\n      username: 'zzzz',\n      email:'love@dd',\n      active: false,\n    }\n  ]);\n\n  const nextId = useRef(4);\n\n\n  const onChange = useCallback(e => {\n    const {name, value} = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value\n    })\n  }, [inputs])\n  // inputs가 바뀔때만 사용하게되고, 아니라면 그냥 재사용하게 된다.\n  // 참조하는것들을 넣어준다.\n  // deps에는 지금 영향을 받는 참조값을 넣어주지 않으면, 최신상태의 참조값이 아니라 이전값이 영향을 받을 수 있다.\n\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email,\n    }\n    // setUsers([...users, user]);\n    setUsers(users => users.concat(user))\n    setInputs({\n      username:'',\n      email:''\n    })\n    nextId.current += 1; \n  }, [username, email, users])\n\n  const onRemove = useCallback(id => {\n    setUsers(users => users.filter(user => user.id !== id));\n  }, [])\n  // 배열에 있는 특정아이템만 업데이트 해줄때에도 map을 사용할 수 있다.\n  const onToggle = useCallback(id => {\n    setUsers(users.map(\n      user => user.id === id\n        ? {...user, active: !user.active}\n        : user\n    ))\n  }, [users])\n  \n  const count = useMemo(() => countActiveUsers(users), [users]);\n\n  return (\n    <div>\n      <CreateUser username={username} \n        email={email} \n        onChange={onChange} \n        onCreate={onCreate} />\n       <UserList users={users} onRemove={onRemove} onToggle = {onToggle}/>\n  <div>활성 사용자 수: {count}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}